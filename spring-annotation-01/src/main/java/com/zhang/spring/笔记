一、spring类配置查看类的类型

     String[] names = context1.getBeanNamesForType(Person.class);
            for (String name : names) {
                System.out.println(name);
            }



二、自动扫描组件名称查询

    String[] beanDefinitionNames = context1.getBeanDefinitionNames();
            for (String beanDefinitionName : beanDefinitionNames) {
                System.out.println(beanDefinitionName);
            }


三、包扫描过滤


     1、FilterType.ANNOTATION：注解过滤
     参数解释：1：basePackages包扫描
              2：excludeFilters 排除扫描
              3：@ComponentScan.Filter
              3.1：filter(注解)类型(
              ANNOTATION(默认),ASSIGNABLE_TYPE,ASPECTJ,REGEX,CUSTOM;
              )
              3.2：classes 不包含的注解类

    @ComponentScan(basePackages = {"com.zhang.spring"},excludeFilters = {
            @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = {
                    Controller.class, Service.class
            })
    })

    只包含：useDefaultFilters = false

    2、ASSIGNABLE_TYPE:可分配类型 类来过滤
    @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,classes = {FirstDao .class})


四、MyCustomer implements TypeFilter自定义扫描过滤

      1、 /**
         * 参数1：metadataReader获取当前正在扫描类的信息
         * 参数2：获取其他类任何信息
         */

        public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)

        ClassMetadata classMetadata = metadataReader.getClassMetadata();
                System.out.println("--->"+metadataReader.toString());
                if(classMetadata.getClassName().contains("ao")){
                    return true;
                }
        利用类元数据获取类名，判断类是否包含"ao",装配到容器中

      2、配置文件中代码：
         @ComponentScan.Filter(type=FilterType.CUSTOM,classes = {MyCustomer.class})